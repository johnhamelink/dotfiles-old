set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle handle itsself!
Bundle 'gmarik/vundle'

" Show a pretty startup page with bookmarks,
" recently used files and sessions.
Bundle 'mhinz/vim-startify'


" Syntax Highlighting for ActiveRecord,
" Rake Interface, Rails CLI Interface,
" Concern extraction (:Rextract {file}),
" Allows 'gf' to know about partials, fixtures,
" and more.
Bundle 'tpope/vim-rails' 
" Vim-rake lets us use some of the
" rails functionality on non-rails
" ruby projects.
Bundle 'tpope/vim-rake'

" Various ruby-specific changes
Bundle 'vim-ruby/vim-ruby'

" :Bundle interface, supports 'gf' inside
" Gemfile.lock, and handy syntax highlighting
" for uninstalled gems.
Bundle 'tpope/vim-bundler'

" Add a gutter with git changes in it.
Bundle 'airblade/vim-gitgutter'

" Adds 'end' to 'def', 'if', 'do'
Bundle 'tpope/vim-endwise'

" Makes columnising easy
Bundle "godlygeek/tabular"

" Surround stuff with stuff
Bundle 'tpope/vim-surround'

" Fuzzy finder supporting file, 
" buffer, MRU, history, and a 
" mixture.
Bundle 'kien/ctrlp.vim'

" Supercharged autocompletion
Bundle 'Valloric/YouCompleteMe'

" Syntax highlighting for scss files.
Bundle 'cakebaker/scss-syntax.vim'


" Gist integration
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
" When sending code, copy resultant URL to the clipboard
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_open_browser_after_post = 1
" Private gists by default
let g:gist_private = 1

" Nice theme - 'rtp : 'vim/' makes sure that the 
" vim subdir is used for this plugin.
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
colorscheme Tomorrow-Night

" Define what number of spaces a tab in a file counts for
set tabstop=2

" The shiftwidth command controls how many columns text is indented
" with the reindent operations (<< and >>).
set shiftwidth=2

" Set the number of spaces that a <Tab> counts for while 
" performing editing operations, like inserting <Tab> or using
" <BS>.
set softtabstop=2

" When in insert-mode, use the appropriate number of spaces
" to insert a <tab>
set expandtab

" Copy indent from the line above when pressing enter
set autoindent

" When starting a new line, vim should figure out the correct
" indent to start on. Apparently.
set smartindent

" No word-wrap
set nowrap

" Show line numbers
set number

" Automatically cd into the dir
" of the file in the buffer.
set autochdir

" Highlight search results
set hlsearch

" Show search matches as we type
set incsearch

" Ignore all of the below filetypes
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildmode=longest:full,list:full

" Don't beep at me!
set visualbell 
set noerrorbells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Set the mapleader to \ - this
" lets us use ctrlp's advanced
" stuff.
let mapleader="\\"
let g:mapleader="\\"


if has("gui_running")
  set guioptions-=e
	set guioptions-=m
	set guioptions-=T
	set guioptions-=t
	set guioptions-=r
	set guioptions-=L
  set guicursor+=a:blinkon0
  " Show the internal vim tabs only if there's >1 tab open
  set stal=1 
  " Full screen means FULL screen
  set fuoptions=maxvert,maxhorz 
  " Turn off the visual bell
  set vb t_vb=
endif


" Hide the banner
let g:netrw_banner=0


" Resize splits when the window is resized
au VimResized * :wincmd =

" Resize buffer by +/- 10
nnoremap <silent> <C-w>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <C-w>- :exe "resize " . (winheight(0) * 2/3)<CR>

"if has("autocmd")
"  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
"  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
"  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"endif

filetype plugin indent on

